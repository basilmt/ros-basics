// Generated by gencpp from file vitarana_drone/prop_speed.msg
// DO NOT EDIT!


#ifndef VITARANA_DRONE_MESSAGE_PROP_SPEED_H
#define VITARANA_DRONE_MESSAGE_PROP_SPEED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vitarana_drone
{
template <class ContainerAllocator>
struct prop_speed_
{
  typedef prop_speed_<ContainerAllocator> Type;

  prop_speed_()
    : prop1(0.0)
    , prop2(0.0)
    , prop3(0.0)
    , prop4(0.0)  {
    }
  prop_speed_(const ContainerAllocator& _alloc)
    : prop1(0.0)
    , prop2(0.0)
    , prop3(0.0)
    , prop4(0.0)  {
  (void)_alloc;
    }



   typedef double _prop1_type;
  _prop1_type prop1;

   typedef double _prop2_type;
  _prop2_type prop2;

   typedef double _prop3_type;
  _prop3_type prop3;

   typedef double _prop4_type;
  _prop4_type prop4;





  typedef boost::shared_ptr< ::vitarana_drone::prop_speed_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vitarana_drone::prop_speed_<ContainerAllocator> const> ConstPtr;

}; // struct prop_speed_

typedef ::vitarana_drone::prop_speed_<std::allocator<void> > prop_speed;

typedef boost::shared_ptr< ::vitarana_drone::prop_speed > prop_speedPtr;
typedef boost::shared_ptr< ::vitarana_drone::prop_speed const> prop_speedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vitarana_drone::prop_speed_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vitarana_drone::prop_speed_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vitarana_drone::prop_speed_<ContainerAllocator1> & lhs, const ::vitarana_drone::prop_speed_<ContainerAllocator2> & rhs)
{
  return lhs.prop1 == rhs.prop1 &&
    lhs.prop2 == rhs.prop2 &&
    lhs.prop3 == rhs.prop3 &&
    lhs.prop4 == rhs.prop4;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vitarana_drone::prop_speed_<ContainerAllocator1> & lhs, const ::vitarana_drone::prop_speed_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vitarana_drone

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::vitarana_drone::prop_speed_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vitarana_drone::prop_speed_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vitarana_drone::prop_speed_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vitarana_drone::prop_speed_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vitarana_drone::prop_speed_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vitarana_drone::prop_speed_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vitarana_drone::prop_speed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "22246cf2b6038087c0c429c875fc8ffa";
  }

  static const char* value(const ::vitarana_drone::prop_speed_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x22246cf2b6038087ULL;
  static const uint64_t static_value2 = 0xc0c429c875fc8ffaULL;
};

template<class ContainerAllocator>
struct DataType< ::vitarana_drone::prop_speed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vitarana_drone/prop_speed";
  }

  static const char* value(const ::vitarana_drone::prop_speed_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vitarana_drone::prop_speed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 prop1\n"
"float64 prop2\n"
"float64 prop3\n"
"float64 prop4 \n"
;
  }

  static const char* value(const ::vitarana_drone::prop_speed_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vitarana_drone::prop_speed_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.prop1);
      stream.next(m.prop2);
      stream.next(m.prop3);
      stream.next(m.prop4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct prop_speed_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vitarana_drone::prop_speed_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vitarana_drone::prop_speed_<ContainerAllocator>& v)
  {
    s << indent << "prop1: ";
    Printer<double>::stream(s, indent + "  ", v.prop1);
    s << indent << "prop2: ";
    Printer<double>::stream(s, indent + "  ", v.prop2);
    s << indent << "prop3: ";
    Printer<double>::stream(s, indent + "  ", v.prop3);
    s << indent << "prop4: ";
    Printer<double>::stream(s, indent + "  ", v.prop4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VITARANA_DRONE_MESSAGE_PROP_SPEED_H
