// Generated by gencpp from file vitarana_drone/edrone_cmd.msg
// DO NOT EDIT!


#ifndef VITARANA_DRONE_MESSAGE_EDRONE_CMD_H
#define VITARANA_DRONE_MESSAGE_EDRONE_CMD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vitarana_drone
{
template <class ContainerAllocator>
struct edrone_cmd_
{
  typedef edrone_cmd_<ContainerAllocator> Type;

  edrone_cmd_()
    : rcRoll(0.0)
    , rcPitch(0.0)
    , rcYaw(0.0)
    , rcThrottle(0.0)
    , aux1(0.0)
    , aux2(0.0)
    , aux3(0.0)
    , aux4(0.0)  {
    }
  edrone_cmd_(const ContainerAllocator& _alloc)
    : rcRoll(0.0)
    , rcPitch(0.0)
    , rcYaw(0.0)
    , rcThrottle(0.0)
    , aux1(0.0)
    , aux2(0.0)
    , aux3(0.0)
    , aux4(0.0)  {
  (void)_alloc;
    }



   typedef double _rcRoll_type;
  _rcRoll_type rcRoll;

   typedef double _rcPitch_type;
  _rcPitch_type rcPitch;

   typedef double _rcYaw_type;
  _rcYaw_type rcYaw;

   typedef double _rcThrottle_type;
  _rcThrottle_type rcThrottle;

   typedef double _aux1_type;
  _aux1_type aux1;

   typedef double _aux2_type;
  _aux2_type aux2;

   typedef double _aux3_type;
  _aux3_type aux3;

   typedef double _aux4_type;
  _aux4_type aux4;





  typedef boost::shared_ptr< ::vitarana_drone::edrone_cmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vitarana_drone::edrone_cmd_<ContainerAllocator> const> ConstPtr;

}; // struct edrone_cmd_

typedef ::vitarana_drone::edrone_cmd_<std::allocator<void> > edrone_cmd;

typedef boost::shared_ptr< ::vitarana_drone::edrone_cmd > edrone_cmdPtr;
typedef boost::shared_ptr< ::vitarana_drone::edrone_cmd const> edrone_cmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vitarana_drone::edrone_cmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vitarana_drone::edrone_cmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vitarana_drone::edrone_cmd_<ContainerAllocator1> & lhs, const ::vitarana_drone::edrone_cmd_<ContainerAllocator2> & rhs)
{
  return lhs.rcRoll == rhs.rcRoll &&
    lhs.rcPitch == rhs.rcPitch &&
    lhs.rcYaw == rhs.rcYaw &&
    lhs.rcThrottle == rhs.rcThrottle &&
    lhs.aux1 == rhs.aux1 &&
    lhs.aux2 == rhs.aux2 &&
    lhs.aux3 == rhs.aux3 &&
    lhs.aux4 == rhs.aux4;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vitarana_drone::edrone_cmd_<ContainerAllocator1> & lhs, const ::vitarana_drone::edrone_cmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vitarana_drone

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::vitarana_drone::edrone_cmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vitarana_drone::edrone_cmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vitarana_drone::edrone_cmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vitarana_drone::edrone_cmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vitarana_drone::edrone_cmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vitarana_drone::edrone_cmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vitarana_drone::edrone_cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dc07470079f832efd9aebe0e4687ea6f";
  }

  static const char* value(const ::vitarana_drone::edrone_cmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdc07470079f832efULL;
  static const uint64_t static_value2 = 0xd9aebe0e4687ea6fULL;
};

template<class ContainerAllocator>
struct DataType< ::vitarana_drone::edrone_cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vitarana_drone/edrone_cmd";
  }

  static const char* value(const ::vitarana_drone::edrone_cmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vitarana_drone::edrone_cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 rcRoll\n"
"float64 rcPitch\n"
"float64 rcYaw\n"
"float64 rcThrottle\n"
"float64 aux1\n"
"float64 aux2\n"
"float64 aux3\n"
"float64 aux4\n"
;
  }

  static const char* value(const ::vitarana_drone::edrone_cmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vitarana_drone::edrone_cmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.rcRoll);
      stream.next(m.rcPitch);
      stream.next(m.rcYaw);
      stream.next(m.rcThrottle);
      stream.next(m.aux1);
      stream.next(m.aux2);
      stream.next(m.aux3);
      stream.next(m.aux4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct edrone_cmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vitarana_drone::edrone_cmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vitarana_drone::edrone_cmd_<ContainerAllocator>& v)
  {
    s << indent << "rcRoll: ";
    Printer<double>::stream(s, indent + "  ", v.rcRoll);
    s << indent << "rcPitch: ";
    Printer<double>::stream(s, indent + "  ", v.rcPitch);
    s << indent << "rcYaw: ";
    Printer<double>::stream(s, indent + "  ", v.rcYaw);
    s << indent << "rcThrottle: ";
    Printer<double>::stream(s, indent + "  ", v.rcThrottle);
    s << indent << "aux1: ";
    Printer<double>::stream(s, indent + "  ", v.aux1);
    s << indent << "aux2: ";
    Printer<double>::stream(s, indent + "  ", v.aux2);
    s << indent << "aux3: ";
    Printer<double>::stream(s, indent + "  ", v.aux3);
    s << indent << "aux4: ";
    Printer<double>::stream(s, indent + "  ", v.aux4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VITARANA_DRONE_MESSAGE_EDRONE_CMD_H
